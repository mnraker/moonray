// Copyright 2023-2024 DreamWorks Animation LLC
// SPDX-License-Identifier: Apache-2.0

//
//
#pragma once
#include "Types.hh"

#include <moonray/rendering/shading/ispc/bsdf/BsdfSlice.isph> // FrameState::ShadowTerminatorFix

#include <scene_rdl2/common/math/ispc/Color.isph>
#include <scene_rdl2/common/math/ispc/Vec3.isph>
#include <scene_rdl2/common/math/ispc/Vec4.isph>

struct Light;
struct PathIntegrator;
struct Sample2D;

// Constants used internally
static const uniform float sHitEpsilonStart = 1e-5f;
static const uniform float sHitEpsilonEnd = 1.0f - 1e-3f;

// TODO: move this into embree library.
enum rtcMask {
  // Ray mask types
  RTC_MASK_RAY_CAMERA               = 1,
  RTC_MASK_RAY_SHADOW               = 1 << 1,
  RTC_MASK_RAY_DIFFUSE_REFLECTION   = 1 << 2,
  RTC_MASK_RAY_DIFFUSE_TRANSMISSION = 1 << 3,
  RTC_MASK_RAY_GLOSSY_REFLECTION    = 1 << 4,
  RTC_MASK_RAY_GLOSSY_TRANSMISSION  = 1 << 5,
  RTC_MASK_RAY_MIRROR_REFLECTION    = 1 << 6,
  RTC_MASK_RAY_MIRROR_TRANSMISSION  = 1 << 7,
  // active bits used for ray masks
  RTC_MASK_RAY_ACTIVE_BITS          = 0x000000ff,

  // flag a mesh as single sided
  RTC_MASK_SINGLE_SIDED             = 0x80000000,

  // all masking flags to true
  RTC_MASK_ALL                      = 0xffffffff,
  // all masking flags to false
  RTC_MASK_NONE                     = 0x0,
};

struct BundledOcclRayData
{
    BUNDLED_OCCL_RAY_DATA_MEMBERS;
};

void BundledOcclRayData_init(uniform BundledOcclRayData * varying this,
                             uint32_t flags,
                             const uniform Light * varying light);

struct BundledOcclRay
{
    BUNDLED_OCCL_RAY_MEMBERS;
};

void BundledOcclRay_init(varying BundledOcclRay * uniform this,
                         const varying Vec3f &origin,
                         const varying Vec3f &dir,
                         varying float minT,
                         varying float maxT,
                         varying float time,
                         varying int depth,
                         const varying Color &radiance,
                         varying uint32_t pixel,
                         varying int subpixelIndex,
                         varying uint32_t sequenceID,
                         varying uint32_t tilePass,
                         varying uint32_t dataPtrHandle,
                         varying uint32_t deepDataHandle,
                         varying uint32_t cryptomatteDataHandle,
                         const varying Vec3f &cryptoRefP,
                         const varying Vec3f &cryptoP0,
                         const varying Vec3f &cryptoRefN,
                         const varying Vec2f &cryptoUV,
                         varying uint32_t occlTestType,
                         const varying int32_t shadowReceiverId,
                         varying float lsmpVisibility);

struct BundledRadiance
{
    BUNDLED_RADIANCE_MEMBERS;
};

struct FrameState
{
    FRAME_STATE_MEMBERS;
};

struct DeepData
{
    DEEP_DATA_MEMBERS;
};

struct CryptomatteData
{
    CRYPTOMATTE_DATA_MEMBERS;
};

enum LightSamplingMode
{
    UNIFORM = 0,
    ADAPTIVE = 1
};
