# Copyright 2023-2024 DreamWorks Animation LLC
# SPDX-License-Identifier: Apache-2.0

set(component rendering_displayfilter)

set(installIncludeDir ${PACKAGE_NAME}/rendering/displayfilter)
set(exportGroup ${PROJECT_NAME}Targets)

add_library(${component} SHARED "")
add_library(${PROJECT_NAME}::${component} ALIAS ${component})

# ----------------------------------------
# compile some ispc sources to object files
set(objLib ${component}_objlib)

add_library(${objLib} OBJECT)

target_sources(${objLib}
    PRIVATE
        DisplayFilter.ispc
        InputBuffer.ispc
)

# set some ISPC related properties
file(RELATIVE_PATH relBinDir ${CMAKE_BINARY_DIR} ${CMAKE_CURRENT_BINARY_DIR})
set_target_properties(${objLib} PROPERTIES
    ISPC_HEADER_SUFFIX _ispc_stubs.h
    ISPC_HEADER_DIRECTORY /${relBinDir}
    ISPC_INSTRUCTION_SETS ${GLOBAL_ISPC_INSTRUCTION_SETS}
    ISPC_ARCH ${GLOBAL_ISPC_ARCH}
    ISPC_TARGET_OS ${GLOBAL_ISPC_TARGET_OS}
    # If we don't request the C++ linker, cmake will complain about
    # a missing variable CMAKE_ISPC_CREATE_SHARED_LIBRARY. This seems
    # to be a bug in CMake-3.23's ISPC support
    LINKER_LANGUAGE CXX
)

Moonray_ispc_compile_options(${objLib})

target_link_libraries(${objLib}
    PUBLIC
        SceneRdl2::common_fb_util
        SceneRdl2::common_platform
        SceneRdl2::common_math
        SceneRdl2::scene_rdl2
)

get_target_property(objLibDeps ${objLib} DEPENDENCY)
if(NOT objLibDeps STREQUAL "")
    add_dependencies(${objLibDeps} 
        SceneRdl2::common_fb_util
        SceneRdl2::common_platform
        SceneRdl2::common_math
        SceneRdl2::scene_rdl2
    )
endif()

# ----------------------------------------

get_target_property(ISPC_TARGET_OBJECTS ${objLib} TARGET_OBJECTS)
target_sources(${component}
    PRIVATE
        InputBuffer.cc
        # pull in our ispc object files
        ${ISPC_TARGET_OBJECTS}
)

set_property(TARGET ${component}
    PROPERTY PUBLIC_HEADER
        DisplayFilter.isph
        DisplayFilter.h
        DisplayFilterMacros.isph
        DisplayFilterState.hh
        InputBuffer.hh
        InputBuffer.isph
        InputBuffer.h
        ${CMAKE_CURRENT_BINARY_DIR}/DisplayFilter_ispc_stubs.h
        ${CMAKE_CURRENT_BINARY_DIR}/InputBuffer_ispc_stubs.h
)

target_include_directories(${component}
    INTERFACE
        # find the generated ispc headers during build stage
        $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>
        $<BUILD_INTERFACE:${PROJECT_BINARY_DIR}/include>
        $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include>
        $<INSTALL_INTERFACE:include>
)

target_link_libraries(${component}
    PUBLIC
        SceneRdl2::common_platform
        SceneRdl2::scene_rdl2
)

add_dependencies(${component} ${objLib})

# If at Dreamworks add a SConscript stub file so others can use this library.
SConscript_Stub(${component})

# Set standard compile/link options
Moonray_cxx_compile_definitions(${component})
Moonray_cxx_compile_features(${component})
Moonray_cxx_compile_options(${component})
Moonray_link_options(${component})

# -------------------------------------
# Install the target and the export set
# -------------------------------------
include(GNUInstallDirs)

# install the headers generated by the ispc compiler
# TODO: Most documentation recommends using the new
# target_sources(FILE_SET) feature in CMake 3.21, but
# I am not sure how to use it with headers that are
# generated by the ispc compiler at build time.

install(
    FILES
    DESTINATION
        ${CMAKE_INSTALL_INCLUDEDIR}/${installIncludeDir}/ispc
)

# install the target
install(TARGETS ${component}
    COMPONENT ${component}
    EXPORT ${exportGroup}
    LIBRARY
        DESTINATION ${CMAKE_INSTALL_LIBDIR}
        NAMELINK_SKIP
    RUNTIME
        DESTINATION ${CMAKE_INSTALL_BINDIR}
    ARCHIVE
        DESTINATION ${CMAKE_INSTALL_LIBDIR}
    PUBLIC_HEADER
        DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/${installIncludeDir}
)

# # install the export set
# install(
#     EXPORT ${exportGroup}
#     NAMESPACE ${PROJECT_NAME}::
#     DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}-${PROJECT_VERSION}
# )
