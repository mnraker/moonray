# Copyright 2023-2024 DreamWorks Animation LLC
# SPDX-License-Identifier: Apache-2.0

include(GNUInstallDirs)

set(installIncludeDir ${PACKAGE_NAME}/rendering/shading/ispc)
set(exportGroup ${PROJECT_NAME}Targets)

# =====================================================================================
# shading_eval_ispc: component that lib/rendering/pbr depends on to initiate shading
# =====================================================================================

# -------------------------------------------------------------------
# TODO: In our SCons build, Shadingv.cc is included in shading_eval_ispc, but it
# actually pulls headers from lib/rendering/shading and lib/rendering/shading/ispc.
#   ... so it really should be build *after* those are built and included
# as part of rendering_shading lib, ( I guess )
# -------------------------------------------------------------------

set(lib_type SHARED)
if(IsWindowsPlatform)
    set(lib_type STATIC)
endif()

add_library(shading_eval_ispc ${lib_type} "")
add_library(${PROJECT_NAME}::shading_eval_ispc ALIAS shading_eval_ispc)

# If we don't request the C++ linker, cmake-3.21 will complain about
# a missing variable CMAKE_ISPC_CREATE_SHARED_LIBRARY
set_target_properties(shading_eval_ispc
        PROPERTIES
            LINKER_LANGUAGE CXX)

target_sources(shading_eval_ispc
    PRIVATE
        BasicTexture.ispc
        EvalAttribute.ispc
        OpenVdbUtil.ispc
        Shading.ispc
        UdimTexture.ispc
)

set_property(TARGET shading_eval_ispc
    PROPERTY PUBLIC_HEADER
        BasicTexture.isph
        EvalAttribute.isph
        Shading.isph
        UdimTexture.isph
        ${CMAKE_CURRENT_BINARY_DIR}/BasicTexture_ispc_stubs.h
        ${CMAKE_CURRENT_BINARY_DIR}/EvalAttribute_ispc_stubs.h
        ${CMAKE_CURRENT_BINARY_DIR}/OpenVdbUtil_ispc_stubs.h
        ${CMAKE_CURRENT_BINARY_DIR}/Shading_ispc_stubs.h
        ${CMAKE_CURRENT_BINARY_DIR}/UdimTexture_ispc_stubs.h
)

file(RELATIVE_PATH relBinDir ${CMAKE_BINARY_DIR} ${CMAKE_CURRENT_BINARY_DIR})
set_target_properties(shading_eval_ispc PROPERTIES
    ISPC_HEADER_SUFFIX _ispc_stubs.h
    ISPC_HEADER_DIRECTORY /${relBinDir}
    ISPC_INSTRUCTION_SETS ${GLOBAL_ISPC_INSTRUCTION_SETS}
    ISPC_ARCH ${GLOBAL_ISPC_ARCH}
    ISPC_TARGET_OS ${GLOBAL_ISPC_TARGET_OS}
    # If we don't request the C++ linker, cmake will complain about
    # a missing variable CMAKE_ISPC_CREATE_SHARED_LIBRARY. This seems
    # to be a bug in CMake-3.23's ISPC support
    LINKER_LANGUAGE CXX
)

target_include_directories(shading_eval_ispc
    PUBLIC
        # find the generated ispc headers during build stage
        $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>
        $<BUILD_INTERFACE:${PROJECT_BINARY_DIR}/include>
        $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include>
        $<INSTALL_INTERFACE:include>
)

target_link_libraries(shading_eval_ispc
    PUBLIC
        ${PROJECT_NAME}::bvh_shading_ispc
        ${PROJECT_NAME}::texturing_sampler
        SceneRdl2::common_platform
        SceneRdl2::scene_rdl2
)

if(IsDarwinPlatform)
    set_target_properties(shading_eval_ispc PROPERTIES LINK_FLAGS "-undefined dynamic_lookup")
endif()

if(IsWindowsPlatform)
    set_target_properties(shading_eval_ispc PROPERTIES LINK_FLAGS "/FORCE:UNRESOLVED")
endif()

# If at Dreamworks add a SConscript stub file so others can use this library.
SConscript_Stub(shading_eval_ispc)

# Set standard compile/link options
Moonray_ispc_compile_options(shading_eval_ispc)
Moonray_link_options(shading_eval_ispc)

get_target_property(objLibDeps shading_eval_ispc DEPENDENCY)
if(NOT objLibDeps STREQUAL "")
    add_dependencies(${objLibDeps}
        ${PROJECT_NAME}::texturing_sampler
        SceneRdl2::common_platform
        SceneRdl2::scene_rdl2
    )
endif()

# -------------------------------------------------------------------

# install the target
install(TARGETS shading_eval_ispc
    COMPONENT shading_eval_ispc
    EXPORT ${exportGroup}
    LIBRARY
        DESTINATION ${CMAKE_INSTALL_LIBDIR}
        NAMELINK_SKIP
    RUNTIME
        DESTINATION ${CMAKE_INSTALL_BINDIR}
    ARCHIVE
        DESTINATION ${CMAKE_INSTALL_LIBDIR}
    PUBLIC_HEADER
        DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/${installIncludeDir}
)

# -------------------------------------------------------------------


# =====================================================================================
# shading_ispc: component that shaders depend on to define shaders
# =====================================================================================
add_library(shading_ispc ${lib_type} "")
add_library(${PROJECT_NAME}::shading_ispc ALIAS shading_ispc)

# ----------------------------------------
# We'd like the *_ispc_stubs.h files to be placed into the build
# tree with the same folder organization as their source. This pattern
# is used in our SCons builds, and so our #include paths are expecting it.
# To facilate this, we split the sources into multiple targets based on their
# folder structure and build them in chunks, setting the path for the stubs
# files accordingly
set(sources00
        BsdfBuilder.ispc
        BsdfComponent.ispc
        Closure.ispc
        EvalShader.ispc
        LobeAttenuator.ispc
        PbrValidity.ispc
        RampControl.ispc
        ShaderDataAux.ispc
        Util.ispc)
set(sources01
        bsdf/Bsdf.ispc
        bsdf/BsdfEyeCaustic.ispc
        bsdf/BsdfIridescence.ispc
        bsdf/BsdfLambert.ispc
        bsdf/BsdfMirror.ispc
        bsdf/BsdfOrenNayar.ispc
        bsdf/BsdfRetroreflection.ispc
        bsdf/BsdfSlice.ispc
        bsdf/BsdfStochasticFlakes.ispc
        bsdf/BsdfUtil.ispc
        bsdf/Bsdfv.ispc
        bsdf/Fresnel.ispc)
set(sources02
        bsdf/ashikhmin_shirley/BsdfAshikhminShirley.ispc)
set(sources03
        bsdf/cook_torrance/BsdfCookTorrance.ispc
        bsdf/cook_torrance/BsdfTransmissionCookTorrance.ispc)
set(sources04
        bsdf/cook_torrance/energy_conservation/CookTorranceEnergyCompensation.ispc
        bsdf/cook_torrance/energy_conservation/TransmissionCookTorranceEnergyCompensation.ispc)
set(sources05
        bsdf/fabric/BsdfFabric.ispc
        bsdf/fabric/BsdfFabricVelvet.ispc
        bsdf/fabric/VelvetAlbedo.ispc)
set(sources06
        bsdf/hair/BsdfHair.ispc
        bsdf/hair/BsdfHairDiffuse.ispc
        bsdf/hair/BsdfHairLobes.ispc
        bsdf/hair/BsdfHairOneSampler.ispc
        bsdf/hair/HairState.ispc)
set(sources07
        bsdf/npr/BsdfFlatDiffuse.ispc
        bsdf/npr/BsdfToon.ispc)
set(sources08
        bsdf/under/BsdfUnder.ispc
        bsdf/under/BsdfUnderClearcoat.ispc
        bsdf/under/BsdfUnderClearcoatTransmission.ispc)
set(sources09
        bsdf/ward/BsdfWard.ispc)
set(sources10
        bssrdf/Bssrdf.ispc
        bssrdf/Dipole.ispc
        bssrdf/NormalizedDiffusion.ispc
        bssrdf/VolumeSubsurface.ispc)

file(RELATIVE_PATH relBinDir ${CMAKE_BINARY_DIR} ${CMAKE_CURRENT_BINARY_DIR})

function(make_ispc_target target sources stubsDestination)
    add_library(${target} OBJECT)

    if(IsDarwinPlatform)
        set_target_properties(${target} PROPERTIES LINKER_LANGUAGE CXX)
    endif()

    target_sources(${target} PRIVATE ${sources})
    foreach(source ${sources})
        string(REGEX REPLACE "(.*)\.ispc"
            "${CMAKE_CURRENT_BINARY_DIR}/\\1_ispc_stubs.h"
            header ${source})
        list(APPEND headers ${header})
    endforeach()

    set_target_properties(${target} PROPERTIES
        ISPC_HEADER_SUFFIX _ispc_stubs.h
        ISPC_HEADER_DIRECTORY /${relBinDir}/${stubsDestination}
        ISPC_INSTRUCTION_SETS ${GLOBAL_ISPC_INSTRUCTION_SETS}
        ISPC_ARCH ${GLOBAL_ISPC_ARCH}
        ISPC_TARGET_OS ${GLOBAL_ISPC_TARGET_OS}
        LINKER_LANGUAGE CXX
    )

    set_property(TARGET ${target}
        PROPERTY PUBLIC_HEADER
        ${headers}
    )

    target_include_directories(${target}
        PRIVATE
            $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>
            $<BUILD_INTERFACE:${PROJECT_BINARY_DIR}/include>
            $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include>
    )

    target_link_libraries(${target}
        PRIVATE
            SceneRdl2::common_platform
            SceneRdl2::scene_rdl2
    )

    # Set standard compile/link options
    Moonray_ispc_compile_options(${target})
    Moonray_link_options(${target})


    if(IsWindowsPlatform)
        set_target_properties(${target} PROPERTIES LINK_FLAGS "/FORCE:UNRESOLVED")
    endif()

    # We need to create the destination directory for the ispc_stubs.h
    # files before building the objects
    add_custom_target(${target}_make_dir COMMAND
        ${CMAKE_COMMAND} -E make_directory ${CMAKE_CURRENT_BINARY_DIR}/${stubsDestination})

    add_dependencies(${target} ${target}_make_dir)

    get_target_property(objLibDeps ${target} DEPENDENCY)
    if(NOT objLibDeps STREQUAL "")
        add_dependencies(${objLibDeps} 
            SceneRdl2::common_platform
            SceneRdl2::scene_rdl2
            ${target}_make_dir
        )
    endif()

    install(TARGETS ${target}
        EXPORT ${exportGroup}
        PUBLIC_HEADER
            DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/${installIncludeDir}
            )
endfunction()

make_ispc_target(shading_ispc_00 "${sources00}" .)
make_ispc_target(shading_ispc_01 "${sources01}" bsdf)
make_ispc_target(shading_ispc_02 "${sources02}" bsdf/ashikhmin_shirley)
make_ispc_target(shading_ispc_03 "${sources03}" bsdf/cook_torrance)
make_ispc_target(shading_ispc_04 "${sources04}" bsdf/cook_torrance/energy_conservation)
make_ispc_target(shading_ispc_05 "${sources05}" bsdf/fabric)
make_ispc_target(shading_ispc_06 "${sources06}" bsdf/hair)
make_ispc_target(shading_ispc_07 "${sources07}" bsdf/npr)
make_ispc_target(shading_ispc_08 "${sources08}" bsdf/under)
make_ispc_target(shading_ispc_09 "${sources09}" bsdf/ward)
make_ispc_target(shading_ispc_10 "${sources10}" bssrdf)
# ----------------------------------------




# ----------------------------------------
# There is a bug in the optimization pass with ISPC 1.9.2 which causes certain
# generated code to crash in opt builds. The workaround is to move the offending
# code out into a separate file and build it in debug.
add_library(eval_attribute_debug_hack_ispc OBJECT)

if(IsDarwinPlatform)
    set_target_properties(eval_attribute_debug_hack_ispc PROPERTIES LINKER_LANGUAGE CXX)
endif()

target_sources(eval_attribute_debug_hack_ispc PRIVATE EvalAttributeDebugHack.ispc)

set_target_properties(eval_attribute_debug_hack_ispc PROPERTIES
    ISPC_HEADER_SUFFIX _ispc_stubs.h
    ISPC_HEADER_DIRECTORY /${relBinDir}
    ISPC_INSTRUCTION_SETS ${GLOBAL_ISPC_INSTRUCTION_SETS}
    ISPC_ARCH ${GLOBAL_ISPC_ARCH}
    ISPC_TARGET_OS ${GLOBAL_ISPC_TARGET_OS}
    LINKER_LANGUAGE CXX
)

target_include_directories(eval_attribute_debug_hack_ispc
    PRIVATE
        $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>
        $<BUILD_INTERFACE:${PROJECT_BINARY_DIR}/include>
        $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include>
)

target_link_libraries(eval_attribute_debug_hack_ispc
    PRIVATE
        SceneRdl2::common_platform
        SceneRdl2::scene_rdl2
)

# If at Dreamworks add a SConscript stub file so others can use this library.
SConscript_Stub(eval_attribute_debug_hack_ispc)

# Set standard compile/link options
Moonray_ispc_compile_options(eval_attribute_debug_hack_ispc)
Moonray_link_options(eval_attribute_debug_hack_ispc)

get_target_property(eval_attribute_debug_hack_ispc_deps eval_attribute_debug_hack_ispc DEPENDENCY)
if(NOT eval_attribute_debug_hack_ispc_deps STREQUAL "")
    add_dependencies(${eval_attribute_debug_hack_ispc_deps} 
        SceneRdl2::common_platform
        SceneRdl2::scene_rdl2
    )
endif()

# ... now disable optimizations for this hack file
target_compile_options(eval_attribute_debug_hack_ispc
    PRIVATE
        -DDEBUG
        -O0
)

# ----------------------------------------

get_target_property(shading_ispc_00_target_objects shading_ispc_00 TARGET_OBJECTS)
get_target_property(shading_ispc_01_target_objects shading_ispc_01 TARGET_OBJECTS)
get_target_property(shading_ispc_02_target_objects shading_ispc_02 TARGET_OBJECTS)
get_target_property(shading_ispc_03_target_objects shading_ispc_03 TARGET_OBJECTS)
get_target_property(shading_ispc_04_target_objects shading_ispc_04 TARGET_OBJECTS)
get_target_property(shading_ispc_05_target_objects shading_ispc_05 TARGET_OBJECTS)
get_target_property(shading_ispc_06_target_objects shading_ispc_06 TARGET_OBJECTS)
get_target_property(shading_ispc_07_target_objects shading_ispc_07 TARGET_OBJECTS)
get_target_property(shading_ispc_08_target_objects shading_ispc_08 TARGET_OBJECTS)
get_target_property(shading_ispc_09_target_objects shading_ispc_09 TARGET_OBJECTS)
get_target_property(shading_ispc_10_target_objects shading_ispc_10 TARGET_OBJECTS)
get_target_property(eval_attribute_debug_hack_ispc_target_objects eval_attribute_debug_hack_ispc TARGET_OBJECTS)

set(ISPC_TARGET_OBJECTS
        ${shading_ispc_00_target_objects}
        ${shading_ispc_01_target_objects}
        ${shading_ispc_02_target_objects}
        ${shading_ispc_03_target_objects}
        ${shading_ispc_04_target_objects}
        ${shading_ispc_05_target_objects}
        ${shading_ispc_06_target_objects}
        ${shading_ispc_07_target_objects}
        ${shading_ispc_08_target_objects}
        ${shading_ispc_09_target_objects}
        ${shading_ispc_10_target_objects}
        ${eval_attribute_debug_hack_ispc_target_objects})

target_sources(shading_ispc
    PRIVATE
        BsdfLabels.cc
        bsdf/BsdfUtil.cc
        Shadingv.cc
        # pull in our ispc object files
        ${ISPC_TARGET_OBJECTS}
)

set_property(TARGET shading_ispc
    PROPERTY PUBLIC_HEADER
        AovLabels.isph
        BasicTexture.isph
        BsdfBuilder.isph
        BsdfComponent.isph
        Closure.isph
        EvalAttribute.isph
        EvalShader.isph
        MapApi.isph
        MaterialApi.isph
        RampControl.isph
        ShaderMacros.isph
        Shading.isph
        ShaderDataAux.isph
        Ior.isph
        ColorCorrect.isph
        UdimTexture.isph
        Util.isph
)

target_include_directories(shading_ispc
    PRIVATE
        $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>
    PUBLIC
        # find the generated ispc headers during build stage
        $<BUILD_INTERFACE:${PROJECT_BINARY_DIR}/include>
        $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include>
        $<INSTALL_INTERFACE:include>
)

target_link_libraries(shading_ispc
    PRIVATE
        shading_eval_ispc
        ${PROJECT_NAME}::texturing_sampler
    PUBLIC
        OpenImageIO::OpenImageIO
        SceneRdl2::common_platform
        SceneRdl2::scene_rdl2
)

if(IsDarwinPlatform)
    set_target_properties(shading_ispc PROPERTIES LINK_FLAGS "-undefined dynamic_lookup")
endif()

if(IsWindowsPlatform)
    set_target_properties(shading_ispc PROPERTIES LINK_FLAGS "/FORCE:UNRESOLVED")
endif()

get_target_property(objLibDeps_00 shading_ispc_00 DEPENDENCY)
get_target_property(objLibDeps_01 shading_ispc_01 DEPENDENCY)
get_target_property(objLibDeps_02 shading_ispc_02 DEPENDENCY)
get_target_property(objLibDeps_03 shading_ispc_03 DEPENDENCY)
get_target_property(objLibDeps_04 shading_ispc_04 DEPENDENCY)
get_target_property(objLibDeps_05 shading_ispc_05 DEPENDENCY)
get_target_property(objLibDeps_06 shading_ispc_06 DEPENDENCY)
get_target_property(objLibDeps_07 shading_ispc_07 DEPENDENCY)
get_target_property(objLibDeps_08 shading_ispc_08 DEPENDENCY)
get_target_property(objLibDeps_09 shading_ispc_09 DEPENDENCY)
get_target_property(objLibDeps_10 shading_ispc_10 DEPENDENCY)
get_target_property(eval_attribute_debug_hack_ispc_deps eval_attribute_debug_hack_ispc DEPENDENCY)

if(NOT objLibDeps_00 STREQUAL "")
    add_dependencies(${objLibDeps_00} 
        OpenImageIO::OpenImageIO
        SceneRdl2::common_platform
        SceneRdl2::scene_rdl2
    )
    add_dependencies(${objLibDeps_01} ${objLibDeps_00})
    add_dependencies(${objLibDeps_02} ${objLibDeps_00})
    add_dependencies(${objLibDeps_03} ${objLibDeps_00})
    add_dependencies(${objLibDeps_04} ${objLibDeps_00})
    add_dependencies(${objLibDeps_05} ${objLibDeps_00})
    add_dependencies(${objLibDeps_06} ${objLibDeps_00})
    add_dependencies(${objLibDeps_07} ${objLibDeps_00})
    add_dependencies(${objLibDeps_08} ${objLibDeps_00})
    add_dependencies(${objLibDeps_09} ${objLibDeps_00})
    add_dependencies(${objLibDeps_10} ${objLibDeps_00})
    add_dependencies(${eval_attribute_debug_hack_ispc_deps} ${objLibDeps_00})
endif()

add_dependencies(shading_ispc
        shading_ispc_00
        shading_ispc_01
        shading_ispc_02
        shading_ispc_03
        shading_ispc_04
        shading_ispc_05
        shading_ispc_06
        shading_ispc_07
        shading_ispc_08
        shading_ispc_09
        shading_ispc_10
        eval_attribute_debug_hack_ispc ${eval_attribute_debug_hack_ispc_deps})

# If at Dreamworks add a SConscript stub file so others can use this library.
SConscript_Stub(shading_ispc)

# Set standard compile/link options
Moonray_cxx_compile_definitions(shading_ispc)
Moonray_cxx_compile_features(shading_ispc)
Moonray_cxx_compile_options(shading_ispc)
Moonray_link_options(shading_ispc)

# Install some public headers that really should not be public
# at all.  Fixing this will require reworking/completing the vector
# material shading API
install(
    FILES
        ${CMAKE_CURRENT_SOURCE_DIR}/PbrValidity.isph
    DESTINATION
        ${CMAKE_INSTALL_INCLUDEDIR}/${installIncludeDir}
)
install(
    FILES
        ${CMAKE_CURRENT_SOURCE_DIR}/bsdf/Fresnel.hh
        ${CMAKE_CURRENT_SOURCE_DIR}/bsdf/Fresnel.isph
    DESTINATION
        ${CMAKE_INSTALL_INCLUDEDIR}/${installIncludeDir}/bsdf
)
install(
    FILES
        ${CMAKE_CURRENT_SOURCE_DIR}/bsdf/fabric/VelvetAlbedo.isph
    DESTINATION
        ${CMAKE_INSTALL_INCLUDEDIR}/${installIncludeDir}/bsdf/fabric
)
install(
    FILES
        ${CMAKE_CURRENT_BINARY_DIR}/bssrdf/Bssrdf_ispc_stubs.h
    DESTINATION
        ${CMAKE_INSTALL_INCLUDEDIR}/${installIncludeDir}/bssrdf
)

# -------------------------------------
# Install the target and the export set
# -------------------------------------

# install the target
install(TARGETS shading_ispc
    COMPONENT shading_ispc
    EXPORT ${exportGroup}
    LIBRARY
        DESTINATION ${CMAKE_INSTALL_LIBDIR}
        NAMELINK_SKIP
    RUNTIME
        DESTINATION ${CMAKE_INSTALL_BINDIR}
    ARCHIVE
        DESTINATION ${CMAKE_INSTALL_LIBDIR}
    PUBLIC_HEADER
        DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/${installIncludeDir}
)

# # install the export set
# install(
#     EXPORT ${exportGroup}
#     NAMESPACE ${PROJECT_NAME}::
#     DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}-${PROJECT_VERSION}
# )
